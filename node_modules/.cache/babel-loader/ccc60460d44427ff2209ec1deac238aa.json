{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/chat-app/client/src/components/Chat/Chat.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const ENDPOINT = 'localhost:5000';\n  useEffect(() => {\n    // return url then turn into an object\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(ENDPOINT); // pass endpoint/url to server which is located at localhost5000\n\n    setName(name);\n    setRoom(room); // calling/emit 'join' while sending data (name & room) to server\n\n    socket.emit('join', {\n      name,\n      room\n    }, () => {// any code here gets runned if callback function gets called\n    }); // need a return statement\n\n    return () => {\n      // calling/emit disconnect event\n      socket.emit('disconnect');\n      socket.off(); // turn the instance of the socket off\n    };\n  }, [ENDPOINT, location.search]); // if any these 2 values change, re-render useEffect\n\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"Chat\");\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/mac/Desktop/chat-app/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","socket","Chat","location","name","setName","room","setRoom","ENDPOINT","parse","search","emit","off"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAMW,QAAQ,GAAG,gBAAjB;AAEAV,EAAAA,SAAS,CAAE,MAAM;AACb;AACA,UAAM;AAAEM,MAAAA,IAAF;AAAQE,MAAAA;AAAR,QAAiBP,WAAW,CAACU,KAAZ,CAAkBN,QAAQ,CAACO,MAA3B,CAAvB;AAEAT,IAAAA,MAAM,GAAGD,EAAE,CAACQ,QAAD,CAAX,CAJa,CAIU;;AAEvBH,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP,CAPa,CASb;;AACAL,IAAAA,MAAM,CAACU,IAAP,CAAY,MAAZ,EAAoB;AAAEP,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAApB,EAAoC,MAAM,CACtC;AACH,KAFD,EAVa,CAcb;;AACA,WAAO,MAAM;AACT;AACAL,MAAAA,MAAM,CAACU,IAAP,CAAY,YAAZ;AAEAV,MAAAA,MAAM,CAACW,GAAP,GAJS,CAIM;AAClB,KALD;AAOH,GAtBQ,EAsBL,CAACJ,QAAD,EAAWL,QAAQ,CAACO,MAApB,CAtBK,CAAT,CAL2B,CA2BM;;AAEjC,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH,CAhCD;;AAkCA,eAAeR,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\n\nlet socket;\n\nconst Chat = ({ location }) => {\n    const [name, setName] = useState('')\n    const [room, setRoom] = useState('')\n    const ENDPOINT = 'localhost:5000'\n\n    useEffect((() => {\n        // return url then turn into an object\n        const { name, room } = queryString.parse(location.search) \n\n        socket = io(ENDPOINT); // pass endpoint/url to server which is located at localhost5000\n        \n        setName(name)\n        setRoom(room)\n        \n        // calling/emit 'join' while sending data (name & room) to server\n        socket.emit('join', { name, room }, () => {\n            // any code here gets runned if callback function gets called\n        });\n\n        // need a return statement\n        return () => {\n            // calling/emit disconnect event\n            socket.emit('disconnect')\n\n            socket.off();  // turn the instance of the socket off\n        }\n\n    }), [ENDPOINT, location.search]) // if any these 2 values change, re-render useEffect\n\n    return (\n        <h1>Chat</h1>\n    )\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}