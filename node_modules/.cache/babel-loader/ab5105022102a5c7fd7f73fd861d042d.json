{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/chat-app/client/src/components/Chat/Chat.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessage] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = 'localhost:5000';\n  useEffect(() => {\n    // return url then turn into an object\n    // deconstruct object\n    const {\n      name,\n      room\n    } = queryString.parse(location.search); // Pass endpoint/url to socket to identify the application the data is being sent to\n\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room); // calling/emit 'join' while sending data (name & room) to server\n\n    socket.emit('join', {\n      name,\n      room\n    }, () => {// any code here gets runned if callback function gets called\n    }); // need a return statement\n\n    return () => {\n      // calling/emit disconnect event\n      socket.emit('disconnect');\n      socket.off(); // turn the instance of the socket off\n    };\n  }, [ENDPOINT, location.search]); // if any these 2 values change, re-render useEffect\n\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]);\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, \"Chat\");\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/mac/Desktop/chat-app/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","socket","Chat","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","off","on"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMe,QAAQ,GAAG,gBAAjB;AAEAd,EAAAA,SAAS,CAAE,MAAM;AACb;AACA;AACA,UAAM;AAAEM,MAAAA,IAAF;AAAQE,MAAAA;AAAR,QAAiBP,WAAW,CAACc,KAAZ,CAAkBV,QAAQ,CAACW,MAA3B,CAAvB,CAHa,CAKb;;AACAb,IAAAA,MAAM,GAAGD,EAAE,CAACY,QAAD,CAAX;AAEAP,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP,CATa,CAWb;;AACAL,IAAAA,MAAM,CAACc,IAAP,CAAY,MAAZ,EAAoB;AAAEX,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAApB,EAAoC,MAAM,CACtC;AACH,KAFD,EAZa,CAgBb;;AACA,WAAO,MAAM;AACT;AACAL,MAAAA,MAAM,CAACc,IAAP,CAAY,YAAZ;AAEAd,MAAAA,MAAM,CAACe,GAAP,GAJS,CAIM;AAClB,KALD;AAOH,GAxBQ,EAwBL,CAACJ,QAAD,EAAWT,QAAQ,CAACW,MAApB,CAxBK,CAAT,CAP2B,CA+BM;;AAEjChB,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,MAAM,CAACgB,EAAP,CAAU,SAAV,EAAsBT,OAAD,IAAa;AAC9BG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX;AACH,KAFD;AAGH,GAJQ,EAIN,CAACE,QAAD,CAJM,CAAT;AAMA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH,CA1CD;;AA4CA,eAAeR,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\n\nlet socket;\n\nconst Chat = ({ location }) => {\n    const [name, setName] = useState('');\n    const [room, setRoom] = useState('');\n    const [message, setMessage] = useState([]);\n    const [messages, setMessages] = useState([]);\n    const ENDPOINT = 'localhost:5000'\n\n    useEffect((() => {\n        // return url then turn into an object\n        // deconstruct object\n        const { name, room } = queryString.parse(location.search) \n\n        // Pass endpoint/url to socket to identify the application the data is being sent to\n        socket = io(ENDPOINT); \n        \n        setName(name)\n        setRoom(room)\n        \n        // calling/emit 'join' while sending data (name & room) to server\n        socket.emit('join', { name, room }, () => {\n            // any code here gets runned if callback function gets called\n        });\n\n        // need a return statement\n        return () => {\n            // calling/emit disconnect event\n            socket.emit('disconnect')\n\n            socket.off();  // turn the instance of the socket off\n        }\n\n    }), [ENDPOINT, location.search]) // if any these 2 values change, re-render useEffect\n\n    useEffect(() => {\n        socket.on('message', (message) => {\n            setMessages([...messages, message]);\n        })\n    }, [messages]);\n\n    return (\n        <h1>Chat</h1>\n    )\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}