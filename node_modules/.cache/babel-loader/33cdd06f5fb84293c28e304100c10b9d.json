{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/chat-app/client/src/components/Chat/Chat.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Chat.css';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessage] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = 'localhost:5000';\n  useEffect(() => {\n    // return url then turn into an object\n    // deconstruct object\n    const {\n      name,\n      room\n    } = queryString.parse(location.search); // Pass endpoint/url to socket to identify the application the data is being sent to\n\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room); // calling/emit 'join' while sending data (name & room) to server\n\n    socket.emit('join', {\n      name,\n      room\n    }, () => {// any code here gets runned if callback function gets called\n    }); // need a return statement\n\n    return () => {\n      // calling/emit disconnect event\n      socket.emit('disconnect');\n      socket.off(); // turn the instance of the socket off\n    };\n  }, [ENDPOINT, location.search]); // if any these 2 values change, re-render useEffect\n\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages([...messages, message]);\n    });\n  }, [messages]);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  };\n\n  console.log(messages);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InfoBar, {\n    room: room,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }), messages.map(message => /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 42\n    }\n  }, message.user.charAt(0).toUpperCase() + message.user.slice(1), \": \", message.text)), /*#__PURE__*/React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/mac/Desktop/chat-app/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","InfoBar","Input","socket","Chat","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","off","on","sendMessage","event","preventDefault","console","log","map","user","charAt","toUpperCase","slice","text"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nimport './Chat.css';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\n\nlet socket;\n\nconst Chat = ({ location }) => {\n    const [name, setName] = useState('');\n    const [room, setRoom] = useState('');\n    const [message, setMessage] = useState([]);\n    const [messages, setMessages] = useState([]);\n    const ENDPOINT = 'localhost:5000'\n\n    useEffect((() => {\n        // return url then turn into an object\n        // deconstruct object\n        const { name, room } = queryString.parse(location.search) \n\n        // Pass endpoint/url to socket to identify the application the data is being sent to\n        socket = io(ENDPOINT); \n        \n        setName(name)\n        setRoom(room)\n        \n        // calling/emit 'join' while sending data (name & room) to server\n        socket.emit('join', { name, room }, () => {\n            // any code here gets runned if callback function gets called\n        });\n\n        // need a return statement\n        return () => {\n            // calling/emit disconnect event\n            socket.emit('disconnect')\n\n            socket.off();  // turn the instance of the socket off\n        }\n\n    }), [ENDPOINT, location.search]) // if any these 2 values change, re-render useEffect\n\n    useEffect(() => {\n        socket.on('message', (message) => {\n            setMessages([...messages, message]);\n        })\n    }, [messages]);\n\n    const sendMessage = (event) => {\n        event.preventDefault();\n\n        if (message) {\n            socket.emit('sendMessage', message, () => setMessage(''));\n        }\n    }\n\n    console.log(messages);\n\n    return (\n        <div className=\"outerContainer\">\n            <div className=\"container\">\n                <InfoBar room={room} />\n                {messages.map(message => <p>{message.user.charAt(0).toUpperCase() + message.user.slice(1)}: {message.text}</p>)}\n                <Input message={message} setMessage={setMessage} sendMessage={sendMessage}  />\n            </div>\n        </div>\n    )\n}\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}